Count Good Nodes in Binary Tree

Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

Example 1:

Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.
Problem Explanation:
We are given a binary tree where each node contains an integer. A node is called "good" if the value of that node is greater than or equal to all the values in the path from the root to that node. We need to return the number of good nodes in the binary tree.

Approach:
The brute force solution would involve traversing every path from the root to each node and checking if the node satisfies the "good" condition. However, this approach is inefficient, especially for large trees.

An optimized approach involves using Depth First Search (DFS) or Breadth First Search (BFS) while keeping track of the maximum value encountered so far in the path. As we traverse the tree, we update this maximum and count the nodes that are greater than or equal to the maximum.

Optimized Solution (DFS):
The optimized approach uses DFS traversal. As we traverse the tree, we carry the maximum value seen so far. If the current node's value is greater than or equal to the maximum, it is a good node. We then update the maximum for the next recursive calls.

Time Complexity:
Time: 
ùëÇ
(
ùëõ
)
O(n), where n is the number of nodes in the tree. We visit each node exactly once.
Space: 
ùëÇ
(
‚Ñé
)
O(h), where h is the height of the tree. This is the space used by the recursion stack.
Optimized Code (DFS):
python
Copy code
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def goodNodes(root):
    # Helper function to perform DFS
    def dfs(node, max_val):
        if not node:
            return 0
        
        # Check if the current node is good
        good = 1 if node.val >= max_val else 0
        
        # Update the maximum value on this path
        max_val = max(max_val, node.val)
        
        # Recurse to the left and right subtrees
        good += dfs(node.left, max_val)
        good += dfs(node.right, max_val)
        
        return good
    
    # Initial call starts with root and its value as the max
    return dfs(root, root.val)

# Example input
root = TreeNode(3)
root.left = TreeNode(1)
root.right = TreeNode(4)
root.left.left = TreeNode(3)
root.right.left = TreeNode(1)
root.right.right = TreeNode(5)

# Output
print(goodNodes(root))  # Output: 4
Explanation of Optimized Solution:
TreeNode Class:

The TreeNode class is a standard definition for nodes in a binary tree, with fields val, left, and right.
goodNodes Function:

This function initializes the DFS process, starting from the root node and passing its value as the initial maximum (max_val).
DFS Helper Function:

The helper function dfs recursively traverses the binary tree.
For each node:
We check if the node's value is greater than or equal to the current max_val. If so, it is a good node, and we increment the count.
We update the max_val as we move down the tree.
We recursively call dfs on the left and right children.
The function returns the count of good nodes for the current subtree.
Brute Force Solution:
In a brute force approach, for each node, we would traverse the entire path from the root to that node to determine whether it is a good node. This would involve storing the path or recomputing it at each node.

Time Complexity:
Time: 
ùëÇ
(
ùëõ
2
)
O(n 
2
 ) in the worst case, where n is the number of nodes. This happens because, for each node, we traverse its entire path from the root to that node.
Space: 
ùëÇ
(
‚Ñé
)
O(h), where h is the height of the tree (recursion stack).
Brute Force Code:
python
Copy code
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isGoodNode(root, node, max_val):
    # Base case: if node is null, return False
    if not node:
        return False
    
    # Check if all nodes in the path from root to node have values <= node.val
    if node.val >= max_val:
        return True
    return False

def countGoodNodesBrute(root):
    # Helper function to count good nodes using brute force
    def traverse(node, path):
        if not node:
            return 0
        
        # Check if the current node is good by traversing the path
        max_val = max(path)
        good = 1 if isGoodNode(root, node, max_val) else 0
        
        # Recur on the left and right subtrees, adding current node to the path
        good += traverse(node.left, path + [node.val])
        good += traverse(node.right, path + [node.val])
        
        return good
    
    # Initialize path with root value
    return traverse(root, [root.val])

# Example input
root = TreeNode(3)
root.left = TreeNode(1)
root.right = TreeNode(4)
root.left.left = TreeNode(3)
root.right.left = TreeNode(1)
root.right.right = TreeNode(5)

# Output
print(countGoodNodesBrute(root))  # Output: 4
Explanation of Brute Force Solution:
isGoodNode Function:

This function checks whether the current node is a "good" node by comparing it with all nodes in the path from the root. It returns True if the current node's value is greater than or equal to all the nodes in its path.
countGoodNodesBrute Function:

This function uses recursion to traverse the binary tree.
For each node, it computes the maximum value in the current path (max(path)), and then checks if the node is a good node using the isGoodNode function.
It recurses on both the left and right subtrees, passing the current node's value along the path.
The function returns the total number of good nodes in the tree.
Conclusion:
The optimized solution using DFS is much more efficient, with a time complexity of 
ùëÇ
(
ùëõ
)
O(n), and is preferred for larger trees.
The brute force solution is highly inefficient due to the repeated traversal of paths, with a time complexity of 
ùëÇ
(
ùëõ
2
)
O(n 
2
 ).
By using the optimized solution, we can efficiently count the good nodes in a binary tree, even for trees with many nodes.
