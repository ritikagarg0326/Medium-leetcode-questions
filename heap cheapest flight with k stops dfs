Cheapest Flights Within K Stops

There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.
  Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Problem Explanation
We are given n cities and a list of flights where each flight is represented by three values [from, to, price]. We need to find the cheapest flight from a source city src to a destination city dst with at most k stops. If there is no valid route, return -1.

Approach
To solve this problem, we will discuss two approaches:

Brute Force solution using Depth First Search (DFS).
Optimized Solution using Dijkstra's Algorithm or BFS with a priority queue.
Brute Force (DFS) Approach
Idea:
Perform a DFS from the source city and explore all possible paths to the destination city.
Keep track of the number of stops to ensure we do not exceed the k stops.
At each step, if the number of stops exceeds k, prune that path.
Keep track of the minimum cost found during the exploration.
Time Complexity:
Time: 
𝑂
(
(
𝑛
−
1
)
𝑘
+
1
)
O((n−1) 
k+1
 ) where n is the number of cities and k is the allowed number of stops. This is because, in the worst case, we will explore all paths with k+1 nodes (cities).
Space: 
𝑂
(
𝑛
)
O(n), due to recursion depth and storing cities visited.
Code for Brute Force Solution:
python
Copy code
def findCheapestPriceDFS(n, flights, src, dst, k):
    from collections import defaultdict
    
    # Build the graph as an adjacency list
    graph = defaultdict(list)
    for u, v, price in flights:
        graph[u].append((v, price))
    
    # Define a variable to track the minimum cost found
    min_cost = float('inf')
    
    # DFS Helper function
    def dfs(node, stops, cost):
        nonlocal min_cost
        
        # If we've exceeded the number of stops, return
        if stops > k:
            return
        
        # If we reached the destination, update min_cost
        if node == dst:
            min_cost = min(min_cost, cost)
            return
        
        # Explore neighbors
        for neighbor, price in graph[node]:
            if cost + price > min_cost:
                continue
            dfs(neighbor, stops + 1, cost + price)
    
    # Start DFS from the source
    dfs(src, 0, 0)
    
    return min_cost if min_cost != float('inf') else -1

# Input Example:
n = 4
flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
src = 0
dst = 3
k = 1

print(findCheapestPriceDFS(n, flights, src, dst, k))
Optimized Solution (Dijkstra's / BFS with Priority Queue)
Idea:
Instead of exploring all paths blindly, we use a priority queue (min-heap) to always explore the cheapest flight first.
For each city, we track the number of stops and the cost incurred to reach that city.
The priority queue will store tuples in the form (current_cost, current_city, stops) where current_cost is the cost to reach current_city with stops number of stops.
Use BFS to explore the neighboring cities from the current city while keeping track of the minimum cost.
If a city can be reached at a lower cost with fewer stops than previously recorded, update it and continue exploring.
Time Complexity:
Time: 
𝑂
(
𝐸
log
⁡
𝑉
)
O(ElogV), where E is the number of flights (edges), and V is the number of cities (nodes). The priority queue operation takes logarithmic time, hence the logarithmic factor.
Space: 
𝑂
(
𝑉
+
𝐸
)
O(V+E), since we store the graph and the priority queue.
Code for Optimized Solution:
python
Copy code
import heapq
from collections import defaultdict

def findCheapestPriceDijkstra(n, flights, src, dst, k):
    # Create a graph using an adjacency list
    graph = defaultdict(list)
    for u, v, price in flights:
        graph[u].append((v, price))
    
    # Priority queue (min-heap) to store (cost, current_city, stops)
    pq = [(0, src, 0)]
    
    # To track the minimum cost to reach each city with a certain number of stops
    visited = {}
    
    while pq:
        cost, city, stops = heapq.heappop(pq)
        
        # If we have reached the destination, return the cost
        if city == dst:
            return cost
        
        # If the number of stops exceeds the limit, continue
        if stops > k:
            continue
        
        # Explore neighbors
        for neighbor, price in graph[city]:
            new_cost = cost + price
            # If we haven't visited this neighbor with fewer stops or at a lower cost, visit it
            if (neighbor, stops) not in visited or new_cost < visited[(neighbor, stops)]:
                visited[(neighbor, stops)] = new_cost
                heapq.heappush(pq, (new_cost, neighbor, stops + 1))
    
    # If no valid path is found, return -1
    return -1

# Input Example:
n = 4
flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
src = 0
dst = 3
k = 1

print(findCheapestPriceDijkstra(n, flights, src, dst, k))
Explanation of the Optimized Code:
Graph Construction: We first create an adjacency list from the list of flights. Each city points to its neighboring cities and the associated cost.

Priority Queue:

We initialize a priority queue with the tuple (0, src, 0) representing the starting point (source city, 0 cost, 0 stops).
Main Loop:

In each iteration, we pop the city with the lowest cost from the queue.
If we reach the destination, we return the cost.
If we haven't exceeded the stop limit, we explore all the neighbors of the current city. For each neighbor, we calculate the new cost and push it onto the queue if it results in a cheaper path to that city.
Stopping Condition:

The loop continues until the priority queue is empty. If no path is found, return -1.
Input:
python
Copy code
n = 4
flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
src = 0
dst = 3
k = 1
Output:
python
Copy code
# For Brute Force DFS
700

# For Optimized Dijkstra
700





