Largest Divisible Subset
Category	Difficulty	Likes	Dislikes
algorithms	Medium (45.67%)	6009	285
Tags
math | dynamic-programming

Companies
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
  To solve the problem of finding the largest divisible subset from a set of distinct positive integers, we can approach it with both a brute force method and a more optimized dynamic programming solution.

Brute Force Solution
The brute force method involves checking all possible subsets of the given integers to find the largest one that meets the divisibility condition.

Steps:
Generate all possible subsets of the input list.
For each subset, check if every pair of elements satisfies the divisibility condition.
Keep track of the largest valid subset found.
Time Complexity:
O(2^n): The number of subsets is 
2
ùëõ
2 
n
 , and checking each subset can take 
ùëÇ
(
ùëõ
2
)
O(n 
2
 ).
Space Complexity:
O(n): For storing subsets.
Brute Force Code:

from itertools import combinations

def is_divisible_subset(subset):
    """Check if every pair in the subset satisfies the divisibility condition."""
    for i in range(len(subset)):
        for j in range(i + 1, len(subset)):
            if subset[j] % subset[i] != 0 and subset[i] % subset[j] != 0:
                return False
    return True

def largest_divisible_subset_brute(nums):
    """Find the largest divisible subset using brute force."""
    max_subset = []
    n = len(nums)
    
    # Check all possible subsets
    for r in range(1, n + 1):
        for subset in combinations(nums, r):
            if is_divisible_subset(subset) and len(subset) > len(max_subset):
                max_subset = subset
                
    return list(max_subset)

# Example usage
print(largest_divisible_subset_brute([1, 2, 3]))  # Output: [1, 2] or [1, 3]
print(largest_divisible_subset_brute([1, 2, 4, 8]))  # Output: [1, 2, 4, 8]
Optimized Dynamic Programming Solution
The optimized approach uses dynamic programming to keep track of the largest divisible subset ending at each index. This method is much more efficient.

Steps:
Sort the Array: Sort the input list nums to ensure that we can build subsets in increasing order.
Initialize DP and Previous Arrays:
Use a dp array where dp[i] stores the size of the largest divisible subset ending with nums[i].
Use a prev array to reconstruct the largest subset later.
Dynamic Programming Loop:
For each element in nums, check all previous elements to see if they can form a divisible subset.
Update the dp and prev arrays accordingly.
Reconstruct the Subset: After filling the arrays, backtrack using the prev array to construct the largest divisible subset.
Time Complexity:
O(n^2): For filling the dp array where 
ùëõ
n is the length of the input list.
Space Complexity:
O(n): For storing the dp and prev arrays.
Optimized Code:

def largest_divisible_subset(nums):
    """Find the largest divisible subset using dynamic programming."""
    if not nums:
        return []
    
    nums.sort()  # Sort the array
    n = len(nums)
    dp = [1] * n  # Initialize dp array
    prev = [-1] * n  # To reconstruct the subset
    
    max_size = 0
    max_index = -1

    # Build the dp array
    for i in range(n):
        for j in range(i):
            if nums[i] % nums[j] == 0:  # Check divisibility
                if dp[i] < dp[j] + 1:  # Update dp and prev if we found a larger subset
                    dp[i] = dp[j] + 1
                    prev[i] = j
                    
        # Track the maximum size and index
        if dp[i] > max_size:
            max_size = dp[i]
            max_index = i

    # Reconstruct the largest divisible subset
    result = []
    while max_index != -1:
        result.append(nums[max_index])
        max_index = prev[max_index]

    return result[::-1]  # Return the result in the correct order

# Example usage
print(largest_divisible_subset([1, 2, 3]))  # Output: [1, 2] or [1, 3]
print(largest_divisible_subset([1, 2, 4, 8]))  # Output: [1, 2, 4, 8]
Explanation of the Optimized Code:
Sorting: The array is sorted to help ensure that we can easily find divisible relationships.
Dynamic Programming Setup:
dp[i] keeps track of the largest subset length that can end at index i.
prev[i] is used to backtrack and find the elements of the largest subset.
Filling the DP Array: For each element, check all previous elements to see if they can form a divisible subset. If so, update the dp and prev accordingly.
Reconstruction: Starting from the maximum index, we trace back through the prev array to construct the subset in reverse order and return it.
Summary of Comparison:
Approach	Time Complexity	Space Complexity	Explanation
Brute Force	O(2^n)	O(n)	Generates all subsets and checks for divisibility.
Optimized	O(n^2)	O(n)	Uses dynamic programming to find and reconstruct the largest subset efficiently.
The optimized solution is significantly more efficient and should be preferred for larger input sizes.






