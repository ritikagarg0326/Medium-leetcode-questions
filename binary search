Find Peak Element

Tags
array | binary-search

Companies
A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.
Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.
Brute Force Solution
In the brute force solution, we simply iterate through each element of the array and check if it is greater than both its neighbors.

Brute Force Code:

def findPeakElement(nums):
    n = len(nums)
    
    # If the array has only one element, return its index (0)
    if n == 1:
        return 0
    
    # Loop through the array and check each element with its neighbors
    for i in range(n):
        if (i == 0 and nums[i] > nums[i + 1]):  # Check first element
            return i
        elif (i == n - 1 and nums[i] > nums[i - 1]):  # Check last element
            return i
        elif (nums[i] > nums[i - 1] and nums[i] > nums[i + 1]):  # Check other elements
            return i

# Example usage:
nums = [1, 2, 3, 1]
print(findPeakElement(nums))  # Output: 2
Explanation:
Edge Case Check: If there is only one element in the array (n == 1), return index 0 because it is trivially a peak.
Loop Through the Array:
For each element, check:
If it's the first element (i == 0), check if it's greater than the second element.
If it's the last element (i == n - 1), check if it's greater than the second-to-last element.
For other elements, check if it's greater than both its left (i-1) and right (i+1) neighbors.
Return the Index of the first peak found.
Time Complexity:
O(n) because we are scanning the entire array once.
Space Complexity:
O(1) as no extra space is used.
Optimized Solution (Binary Search)
The problem asks for an O(log n) solution, which hints at using binary search. Instead of scanning the entire array, we can use a divide-and-conquer approach to find the peak element.

Optimized Binary Search Code:

def findPeakElement(nums):
    left, right = 0, len(nums) - 1
    
    # Perform binary search
    while left < right:
        mid = (left + right) // 2  # Find the middle index
        
        # If the middle element is less than the next element, move to the right
        if nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:  # If the middle element is greater than the next element, move to the left
            right = mid
    
    # When left == right, the peak element is found
    return left

# Example usage:
nums = [1, 2, 3, 1]
print(findPeakElement(nums))  # Output: 2
Explanation:
Initial Variables:

left starts at index 0.
right starts at index len(nums) - 1 (the last index of the array).
Binary Search Loop:

Find the middle index mid using (left + right) // 2.
Compare nums[mid] with nums[mid + 1]:
If nums[mid] < nums[mid + 1], it means the peak lies on the right side, so we update left = mid + 1.
Otherwise, if nums[mid] >= nums[mid + 1], it means the peak lies on the left side (including the middle element), so we update right = mid.
Return the index left when left == right. This index will be a peak element.

Time Complexity:
O(log n) because we are halving the search space in each iteration of the binary search.
Space Complexity:
O(1) as we are only using a few variables for the binary search.
