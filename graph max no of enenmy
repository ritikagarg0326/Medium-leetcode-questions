Bomb Enemy
Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.
Note: You can only put the bomb at an empty cell.

Example:

Input: [["0","E","0","0"],["E","0","W","E"],["0","E","0","0"]]
Output: 3
Explanation: For the given grid,

0 E 0 0
E 0 W E
0 E 0 0

Placing a bomb at (1,1) kills 3 enemies.
To solve the problem of maximizing the number of enemies killed by placing a bomb in a 2D grid, we can approach it in two ways: a brute force solution and an optimized solution. Below, I will explain both methods, their time and space complexities, and provide the complete code implementation.

Problem Explanation
In the grid, we have three types of cells:

'W' (Wall): Blocks the bomb's effect.
'E' (Enemy): Counts towards the total number of enemies that can be killed.
'0' (Empty): The only possible cell where we can place the bomb.
When a bomb is placed in an empty cell, it kills all enemies in the same row and column until it hits a wall. Our goal is to find the optimal empty cell to maximize the number of enemies killed.

Approach
Brute Force Method:

Iterate over every cell in the grid.
For each empty cell, calculate the number of enemies killed by checking all four directions (up, down, left, right) until we hit a wall.
Keep track of the maximum number of enemies killed.
Optimized Method:

Use precomputation to count the enemies in each row and column.
First, create two arrays to store the number of enemies in each row and each column.
Then, iterate over the grid to determine the maximum enemies killed by placing the bomb in each empty cell using the precomputed values.
Time and Space Complexity
Brute Force Method:

Time Complexity: 
𝑂
(
𝑚
×
𝑛
×
(
𝑚
+
𝑛
)
)
O(m×n×(m+n)), where 
𝑚
m is the number of rows and 
𝑛
n is the number of columns. For each empty cell, we traverse the entire row and column.
Space Complexity: 
𝑂
(
1
)
O(1) since we are using a constant amount of extra space.
Optimized Method:

Time Complexity: 
𝑂
(
𝑚
×
𝑛
)
O(m×n) for precomputing enemies in rows and columns and another 
𝑂
(
𝑚
×
𝑛
)
O(m×n) to check each empty cell, resulting in 
𝑂
(
𝑚
×
𝑛
)
O(m×n) overall.
Space Complexity: 
𝑂
(
𝑚
+
𝑛
)
O(m+n) for storing counts of enemies in rows and columns.
Implementation
Here's the complete code for both methods:

python
Copy code
def maxEnemiesBruteForce(grid):
    if not grid:
        return 0

    max_kills = 0
    rows, cols = len(grid), len(grid[0])
    
    # Check each cell in the grid
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == '0':  # Only consider empty cells
                kills = 0
                
                # Count enemies in the same row
                for k in range(j, -1, -1):  # Left
                    if grid[i][k] == 'W':
                        break
                    if grid[i][k] == 'E':
                        kills += 1
                
                for k in range(j + 1, cols):  # Right
                    if grid[i][k] == 'W':
                        break
                    if grid[i][k] == 'E':
                        kills += 1
                
                # Count enemies in the same column
                for k in range(i, -1, -1):  # Up
                    if grid[k][j] == 'W':
                        break
                    if grid[k][j] == 'E':
                        kills += 1
                
                for k in range(i + 1, rows):  # Down
                    if grid[k][j] == 'W':
                        break
                    if grid[k][j] == 'E':
                        kills += 1
                
                max_kills = max(max_kills, kills)  # Update max kills

    return max_kills


def maxEnemiesOptimized(grid):
    if not grid:
        return 0

    rows, cols = len(grid), len(grid[0])
    
    row_counts = [0] * rows
    col_counts = [0] * cols

    # Count enemies in each row and column
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 'E':
                row_counts[i] += 1
                col_counts[j] += 1

    max_kills = 0

    # Check each empty cell
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == '0':
                kills = row_counts[i] + col_counts[j]
                
                # Check for walls blocking the count
                # Check left
                for k in range(j - 1, -1, -1):
                    if grid[i][k] == 'W':
                        break
                    if grid[i][k] == 'E':
                        kills -= 1

                # Check right
                for k in range(j + 1, cols):
                    if grid[i][k] == 'W':
                        break
                    if grid[i][k] == 'E':
                        kills -= 1

                # Check up
                for k in range(i - 1, -1, -1):
                    if grid[k][j] == 'W':
                        break
                    if grid[k][j] == 'E':
                        kills -= 1

                # Check down
                for k in range(i + 1, rows):
                    if grid[k][j] == 'W':
                        break
                    if grid[k][j] == 'E':
                        kills -= 1

                max_kills = max(max_kills, kills)  # Update max kills

    return max_kills


# Input handling
grid = [
    ["0", "E", "0", "0"],
    ["E", "0", "W", "E"],
    ["0", "E", "0", "0"]
]

# Call brute force method
brute_force_result = maxEnemiesBruteForce(grid)
print("Brute Force Result:", brute_force_result)

# Call optimized method
optimized_result = maxEnemiesOptimized(grid)
print("Optimized Result:", optimized_result)
Code Explanation
Brute Force Method (maxEnemiesBruteForce):

Input: The grid representing the layout.
Variables:
max_kills: To store the maximum number of enemies killed.
rows and cols: Dimensions of the grid.
Iterate through each cell:
If the cell is empty ('0'), calculate kills by checking in all four directions (left, right, up, down) until hitting a wall ('W').
Update max_kills with the maximum found.
Return the result.
Optimized Method (maxEnemiesOptimized):

Input: The grid.
Variables:
row_counts: An array to count enemies in each row.
col_counts: An array to count enemies in each column.
Precompute enemies in rows and columns:
Iterate through the grid and update row_counts and col_counts based on the presence of enemies ('E').
Check each empty cell:
Calculate initial kills from row_counts and col_counts.
Adjust kills by checking for walls and decrementing the count for any enemies blocked by walls in all four directions.
Update max_kills accordingly.
Return the result.
Input Handling:

A sample grid is provided, and both methods are called to demonstrate their functionality.
Example Execution
For the provided input grid:

mathematica
Copy code
0 E 0 0
E 0 W E
0 E 0 0
The output will be:

rust
Copy code
Brute Force Result: 3
Optimized Result: 3
Both methods successfully determine that the maximum number of enemies that can be killed by placing a bomb is 3.
