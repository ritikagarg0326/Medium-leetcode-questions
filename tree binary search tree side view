Binary Tree Right Side View

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Problem Explanation:
Given the root of a binary tree, you are supposed to return the values of the nodes that are visible when looking at the tree from the right side. The order of the output should be from top to bottom, as you would see the nodes if standing to the right of the tree.

Approach:
There are two main ways to solve this problem:

Brute Force: Perform a level-order traversal (BFS), collect all nodes level by level, and return the last node at each level as it is the rightmost node.
Optimized: Perform a DFS traversal, keeping track of the current depth. At each depth, we store the first node we encounter, which is the rightmost node for that level.
Solution 1: Brute Force (BFS)
In this approach, we can perform a level-order traversal of the binary tree using a queue. For each level, we store the last node we encounter in the queue, which represents the rightmost node of that level.

Time Complexity:
Time: 
ùëÇ
(
ùëõ
)
O(n), where n is the number of nodes in the tree. We visit each node exactly once.
Space: 
ùëÇ
(
ùë§
)
O(w), where w is the maximum width of the tree (number of nodes at the largest level).
Brute Force Code (BFS):
python
Copy code
from collections import deque

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def rightSideView(root):
    if not root:
        return []
    
    # Level-order traversal using a queue
    result = []
    queue = deque([root])
    
    while queue:
        level_length = len(queue)
        
        # Traverse each level
        for i in range(level_length):
            node = queue.popleft()
            
            # If it's the last node in this level, add it to result
            if i == level_length - 1:
                result.append(node.val)
            
            # Add children to the queue for the next level
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
    
    return result

# Example input
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.right = TreeNode(5)
root.right.right = TreeNode(4)

# Output
print(rightSideView(root))  # Output: [1, 3, 4]
Explanation of Brute Force Solution:
TreeNode Class:

The TreeNode class is a standard binary tree node definition, with fields val, left, and right.
rightSideView Function:

We initialize a queue for level-order traversal, starting with the root.
For each level, we traverse all the nodes in the queue, and we collect the last node at each level (i.e., the rightmost node).
We append the children of each node (left and right) into the queue to continue the level-order traversal.
The result list stores the rightmost node of each level, which is then returned.
Solution 2: Optimized (DFS)
In the DFS approach, we perform a depth-first traversal of the tree, starting with the right subtree before the left subtree. At each depth, we keep track of the first node we encounter, which will be the rightmost node at that depth. This ensures that we are always adding the rightmost node first for each level.

Time Complexity:
Time: 
ùëÇ
(
ùëõ
)
O(n), where n is the number of nodes in the tree.
Space: 
ùëÇ
(
‚Ñé
)
O(h), where h is the height of the tree (recursion stack).
Optimized Code (DFS):
python
Copy code
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def rightSideViewDFS(root):
    result = []
    
    # Helper function to perform DFS
    def dfs(node, depth):
        if not node:
            return
        
        # If this is the first time we reach this depth, add the node
        if depth == len(result):
            result.append(node.val)
        
        # Traverse right subtree first, then left subtree
        dfs(node.right, depth + 1)
        dfs(node.left, depth + 1)
    
    # Start DFS from the root at depth 0
    dfs(root, 0)
    return result

# Example input
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.right = TreeNode(5)
root.right.right = TreeNode(4)

# Output
print(rightSideViewDFS(root))  # Output: [1, 3, 4]
Explanation of Optimized Solution:
TreeNode Class:

Same as the brute force solution, this class represents each node of the binary tree.
rightSideViewDFS Function:

We initialize an empty result list to store the rightmost nodes at each depth.
The dfs helper function performs a depth-first traversal starting from the root.
Depth Tracking: We pass the current depth as an argument. When the depth equals the length of the result list, it means we are visiting this level for the first time, so we add the current node to the result.
We first traverse the right subtree and then the left subtree to ensure that the rightmost node is encountered first at each depth.
Conclusion:
The brute force (BFS) solution is intuitive and uses level-order traversal to collect the rightmost node at each level.
The optimized (DFS) solution uses a recursive depth-first approach, traversing the right subtree first to ensure that the rightmost node is collected at each depth.
Both approaches have a time complexity of 
ùëÇ
(
ùëõ
)
O(n), but the DFS approach may be more efficient in terms of space if the tree is skewed, as it uses less memory on the recursion stack compared to maintaining a full queue.
