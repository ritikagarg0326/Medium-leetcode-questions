Search in Rotated Sorted Array

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Problem Explanation:
You are given a rotated sorted array, where an array sorted in ascending order is rotated at an unknown pivot. The task is to find the index of the target value in the array. If the target is not found, return -1. The goal is to implement this search in O(log n) time complexity, which hints at using a modified binary search.

Brute Force Solution
In the brute force approach, we would simply iterate through the array and compare each element with the target. This would take O(n) time complexity because in the worst case, we might have to check each element.

Time Complexity:
Time: 
𝑂
(
𝑛
)
O(n) where n is the length of the array. We are doing a linear scan through all elements.
Space: 
𝑂
(
1
)
O(1) because we are using constant space for the search.
Brute Force Code:
python
Copy code
def searchBruteForce(nums, target):
    # Iterate through each element and check if it matches the target
    for i in range(len(nums)):
        if nums[i] == target:
            return i
    return -1

# Example Input
nums = [4, 5, 6, 7, 0, 1, 2]
target = 0

print(searchBruteForce(nums, target))  # Output: 4
Optimized Solution (Binary Search)
Idea:
Since the array is a rotated sorted array, we can modify the binary search approach to solve the problem in 
𝑂
(
log
⁡
𝑛
)
O(logn).

Binary Search Logic:
First, identify which half of the array is sorted by comparing the middle element with the first element.
If the left half is sorted, check if the target lies within the sorted left half.
If not, the target must be in the right half.
Repeat the process recursively or iteratively.
Time Complexity:
Time: 
𝑂
(
log
⁡
𝑛
)
O(logn), because we are halving the search space at each step, which is the property of binary search.
Space: 
𝑂
(
1
)
O(1), because we are using constant space for the search.
Optimized Code (Binary Search):
python
Copy code
def searchBinarySearch(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        # If target is found at the middle index
        if nums[mid] == target:
            return mid
        
        # Check if the left half is sorted
        if nums[left] <= nums[mid]:
            # Check if the target lies in the sorted left half
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            # The right half is sorted
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    
    # If target is not found, return -1
    return -1

# Example Input
nums = [4, 5, 6, 7, 0, 1, 2]
target = 0

print(searchBinarySearch(nums, target))  # Output: 4
Explanation of the Optimized Solution:
Binary Search Setup:

We initialize two pointers, left and right, to represent the search space (initially the entire array).
The mid element is calculated as the middle index of the current range [left, right].
Check if Target is at mid:

If the element at the mid index is the target, we return mid.
Determine Sorted Half:

Compare the element at the left pointer with the element at the mid pointer.
If nums[left] <= nums[mid], the left half is sorted.
Otherwise, the right half is sorted.
Narrow Down the Search:

If the left half is sorted, check if the target lies within the left half:
If nums[left] <= target < nums[mid], update right to search the left half.
Otherwise, search the right half by updating left.
Similarly, if the right half is sorted, check if the target lies within the right half:
If nums[mid] < target <= nums[right], update left to search the right half.
Otherwise, search the left half by updating right.
Repeat the process until left exceeds right, indicating the target is not present in the array.

Input and Output Examples:
python
Copy code
# Example 1
nums = [4, 5, 6, 7, 0, 1, 2]
target = 0
# Output: 4

# Example 2
nums = [4, 5, 6, 7, 0, 1, 2]
target = 3
# Output: -1

# Example 3
nums = [1]
target = 0
# Output: -1
Full Code with Input and Output:
python
Copy code
def searchBinarySearch(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        # If target is found at the middle index
        if nums[mid] == target:
            return mid
        
        # Check if the left half is sorted
        if nums[left] <= nums[mid]:
            # Check if the target lies in the sorted left half
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            # The right half is sorted
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    
    # If target is not found, return -1
    return -1

# Example Input
nums = [4, 5, 6, 7, 0, 1, 2]
target = 0

print(searchBinarySearch(nums, target))  # Output: 4

# Example 2
nums = [4, 5, 6, 7, 0, 1, 2]
target = 3
print(searchBinarySearch(nums, target))  # Output: -1

# Example 3
nums = [1]
target = 0
print(searchBinarySearch(nums, target))  # Output: -1
Final Thoughts:
The brute force solution is simple but inefficient for large arrays.
The optimized binary search solution effectively solves the problem in 
𝑂
(
log
⁡
𝑛
)
O(logn) time, leveraging the properties of the rotated sorted array to find the target efficiently.
