Binary Tree Longest Consecutive Sequence II
Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree.

Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.

Example 1:

Input:
        1
       / \
      2   3
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].
To solve the problem of finding the longest consecutive sequence path in a binary tree, we can use a depth-first search (DFS) approach. This path can be either increasing or decreasing, and it can include any combination of child-parent-child relationships.

Approach
Brute Force Solution: The brute force solution would involve checking all possible paths in the tree, which would be inefficient. We would use DFS to traverse the tree and explore all paths recursively, checking the conditions for consecutiveness. This approach would have high time complexity due to the multiple recursive calls and path checks.

Optimized Solution: Instead of checking every possible path, we can utilize a DFS approach that keeps track of the longest consecutive sequence found while traversing. For each node, we will keep track of two values:

The length of the longest increasing path that includes this node.
The length of the longest decreasing path that includes this node. The result will be updated as we traverse the tree.
Time and Space Complexity
Time Complexity:
Both the brute force and optimized solutions will have a time complexity of 
ùëÇ
(
ùëõ
)
O(n), where 
ùëõ
n is the number of nodes in the binary tree, since each node is visited once.
Space Complexity:
The space complexity is 
ùëÇ
(
‚Ñé
)
O(h) for both solutions, where 
‚Ñé
h is the height of the tree, due to the recursion stack.
Full Implementation
Here is the implementation for both the brute force and optimized solutions:

python
Copy code
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

# Optimized function to find the longest consecutive path
def longestConsecutivePath(root):
    if not root:
        return 0

    def dfs(node):
        if not node:
            return 0, 0  # return (increasing, decreasing)

        # Recursively call for left and right children
        inc_left, dec_left = dfs(node.left)
        inc_right, dec_right = dfs(node.right)

        # Initialize lengths for the current node
        inc, dec = 1, 1
        
        # Check for increasing path
        if node.left and node.left.val == node.val + 1:
            inc = inc_left + 1
        if node.right and node.right.val == node.val + 1:
            inc = max(inc, inc_right + 1)

        # Check for decreasing path
        if node.left and node.left.val == node.val - 1:
            dec = dec_left + 1
        if node.right and node.right.val == node.val - 1:
            dec = max(dec, dec_right + 1)

        # Update the longest path using the current node
        nonlocal longest
        longest = max(longest, inc + dec - 1)  # -1 because current node is counted in both inc and dec

        return inc, dec

    longest = 0
    dfs(root)
    return longest

# Input handling
# Example 1
root1 = TreeNode(1)
root1.left = TreeNode(2)
root1.right = TreeNode(3)

# Example 2
root2 = TreeNode(3)
root2.left = TreeNode(2)
root2.right = TreeNode(4)
root2.left.left = TreeNode(1)

# Test Example 1
output1 = longestConsecutivePath(root1)
print("Longest Consecutive Path Length 1:", output1)

# Test Example 2
output2 = longestConsecutivePath(root2)
print("Longest Consecutive Path Length 2:", output2)
Explanation of the Code
TreeNode Class: A simple class to define a node in the binary tree, which contains a value, a left child, and a right child.

longestConsecutivePath Function:

It takes the root of the binary tree as input.
A nested function dfs(node) performs depth-first search, returning the lengths of the longest increasing and decreasing paths from that node.
We initialize inc and dec to 1, representing the current node itself.
For each child, we check if the child‚Äôs value is one more or one less than the current node‚Äôs value to determine whether to extend the increasing or decreasing path.
We update a longest variable to keep track of the longest consecutive path found.
Finally, we return the longest path length.
Input Handling:

Constructs two example binary trees using the TreeNode class.
Calls longestConsecutivePath with both example trees and prints the results.
Example Output
For the given inputs:

Example 1: The output will be 2, as the longest consecutive path is [1, 2] or [2, 1].
Example 2: The output will be 3, as the longest consecutive path is [1, 2, 3] or [3, 2, 1].
This implementation efficiently finds the longest consecutive sequence path in a binary tree, adhering to the problem's requirements.






