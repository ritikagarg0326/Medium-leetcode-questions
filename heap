Find K Pairs with Smallest Sums
Category	Difficulty	Likes	Dislikes
algorithms	Medium (40.14%)	6355	456
Tags
heap

Companies
You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
  To solve the problem of finding the k pairs with the smallest sums from two sorted arrays, we can approach it using both a brute force method and an optimized approach using a min-heap.

Brute Force Solution
The brute force approach involves generating all possible pairs from the two arrays and then sorting them to find the smallest k pairs.

Steps:
Generate all possible pairs (u, v) from nums1 and nums2.
Calculate the sum for each pair.
Sort the pairs based on their sums.
Return the first k pairs.
Time Complexity:
O(n * m * log(n * m)): Where 
𝑛
n is the length of nums1 and 
𝑚
m is the length of nums2, due to generating all pairs and sorting them.
Space Complexity:
O(n * m): For storing all pairs.
Brute Force Code:

from itertools import product

def k_smallest_pairs_brute(nums1, nums2, k):
    """Find k pairs with the smallest sums using brute force."""
    pairs = []
    
    # Generate all possible pairs and their sums
    for u, v in product(nums1, nums2):
        pairs.append((u, v, u + v))
    
    # Sort pairs based on their sums
    pairs.sort(key=lambda x: x[2])
    
    # Return the first k pairs
    return [[pairs[i][0], pairs[i][1]] for i in range(min(k, len(pairs)))]

# Example usage
print(k_smallest_pairs_brute([1, 7, 11], [2, 4, 6], 3))  # Output: [[1, 2], [1, 4], [1, 6]]
print(k_smallest_pairs_brute([1, 1, 2], [1, 2, 3], 2))  # Output: [[1, 1], [1, 1]]
Optimized Solution Using Min-Heap
The optimized approach utilizes a min-heap to efficiently retrieve the smallest pairs without generating all possible pairs.

Steps:
Use a min-heap to store pairs along with their sums.
Start by adding the smallest pairs involving the first element of nums1 with each element in nums2 into the heap.
Pop the smallest pair from the heap and add it to the result.
For each popped pair, if it contains an element from nums1, add the next element from nums1 paired with the same element from nums2 back into the heap.
Repeat this until we retrieve k pairs or exhaust the possibilities.
Time Complexity:
O(k * log(k)): For retrieving the k smallest pairs using a heap.
Space Complexity:
O(k): For storing the resulting pairs.
Optimized Code:

import heapq

def k_smallest_pairs(nums1, nums2, k):
    """Find k pairs with the smallest sums using a min-heap."""
    min_heap = []
    result = []
    
    # Initialize the heap with the first element of nums1 paired with all elements of nums2
    for j in range(min(k, len(nums2))):  # Only need the first k elements
        heapq.heappush(min_heap, (nums1[0] + nums2[j], 0, j))
    
    # Extract k pairs with the smallest sums
    while k > 0 and min_heap:
        current_sum, i, j = heapq.heappop(min_heap)  # Get the smallest pair
        result.append([nums1[i], nums2[j]])
        k -= 1
        
        # If there's a next element in nums1, add the new pair to the heap
        if i + 1 < len(nums1):
            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))
    
    return result

# Example usage
print(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3))  # Output: [[1, 2], [1, 4], [1, 6]]
print(k_smallest_pairs([1, 1, 2], [1, 2, 3], 2))  # Output: [[1, 1], [1, 1]]
Explanation of the Optimized Code:
Heap Initialization: We start by pushing pairs formed with the first element of nums1 and each element of nums2 into the heap.
Heap Operations:
We pop the smallest pair from the heap and append it to the result.
If there's a next element in nums1, we push the new pair formed with that next element and the current element from nums2 into the heap.
Repeat Until K Pairs Are Found: We continue this process until we have k pairs or we run out of elements.
Summary of Comparison:
Approach	Time Complexity	Space Complexity	Explanation
Brute Force	O(n * m * log(n * m))	O(n * m)	Generates and sorts all pairs.
Optimized with Heap	O(k * log(k))	O(k)	Efficiently retrieves the k smallest pairs using a min-heap.
The optimized solution is significantly more efficient, especially for larger arrays, and is preferred in practice.
