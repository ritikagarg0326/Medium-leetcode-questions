Boundary of Binary Tree
Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.  (The values of the nodes may still be duplicates.)

Left boundary is defined as the path from root to the left-most node. Right boundary is defined as the path from root to the right-most node. If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.

The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.

The right-most node is also defined by the same way with left and right exchanged.

Example 1

Input:
  1
   \
    2
   / \
  3   4

Ouput:
[1, 3, 4, 2]
o solve the problem of finding the boundary of a binary tree in an anti-clockwise direction, we can break down the solution into three main parts:

Left Boundary: Traverse from the root to the left-most leaf node, collecting the values.
Leaves: Traverse the entire tree to collect all leaf nodes.
Right Boundary: Traverse from the root to the right-most leaf node and then reverse the collected values.
We can implement both a brute force and an optimized solution for this problem.

Brute Force Solution
In the brute force approach, we can separately gather the left boundary, leaf nodes, and right boundary values by performing multiple traversals of the binary tree. Here‚Äôs how it works:

Left Boundary: Start from the root and traverse down to the left-most node, collecting values.
Leaves: Use a depth-first traversal (DFS) to find all leaf nodes.
Right Boundary: Start from the root and traverse down to the right-most node, collecting values, and then reverse the order before adding to the result.
Time and Space Complexity
Time Complexity:
Brute force: 
ùëÇ
(
ùëõ
)
O(n), where 
ùëõ
n is the number of nodes in the tree. Each node is visited multiple times, but overall the work done is proportional to the number of nodes.
Space Complexity:
Brute force: 
ùëÇ
(
‚Ñé
)
O(h), where 
‚Ñé
h is the height of the tree, due to the recursion stack space.
Optimized Solution
The optimized solution essentially follows the same logic but focuses on reducing the number of traversals where possible. Instead of performing separate traversals for each boundary, we can collect nodes in a single pass whenever possible.

Full Implementation
Here is the implementation for both the brute force and optimized solutions:

python
Copy code
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def boundaryOfBinaryTree(root):
    if not root:
        return []

    boundary = []

    # Helper function to collect the left boundary
    def collect_left_boundary(node):
        if node:
            if node.left or node.right:  # Only add if not a leaf
                boundary.append(node.val)
            if node.left:
                collect_left_boundary(node.left)
            else:
                collect_left_boundary(node.right)

    # Helper function to collect leaves
    def collect_leaves(node):
        if node:
            if not node.left and not node.right:  # It's a leaf
                boundary.append(node.val)
            collect_leaves(node.left)
            collect_leaves(node.right)

    # Helper function to collect the right boundary
    def collect_right_boundary(node):
        if node:
            if node.right:
                collect_right_boundary(node.right)
            else:
                collect_right_boundary(node.left)
            if node.left or node.right:  # Only add if not a leaf
                boundary.append(node.val)

    # Start with the root
    boundary.append(root.val)
    collect_left_boundary(root.left)
    collect_leaves(root)
    collect_right_boundary(root.right)

    return boundary

# Input handling
# Example 1
root1 = TreeNode(1)
root1.right = TreeNode(2)
root1.right.left = TreeNode(3)
root1.right.right = TreeNode(4)

# Example 2
root2 = TreeNode(1)
root2.left = TreeNode(2)
root2.right = TreeNode(3)
root2.left.left = TreeNode(4)
root2.left.right = TreeNode(5)
root2.right.left = TreeNode(6)
root2.left.right.left = TreeNode(7)
root2.left.right.right = TreeNode(8)
root2.right.left.left = TreeNode(9)
root2.right.left.right = TreeNode(10)

# Test Example 1
output1 = boundaryOfBinaryTree(root1)
print("Boundary of Binary Tree 1:", output1)

# Test Example 2
output2 = boundaryOfBinaryTree(root2)
print("Boundary of Binary Tree 2:", output2)
Explanation of the Code
TreeNode Class: A simple class to define a node in the binary tree, containing a value, a left child, and a right child.

boundaryOfBinaryTree Function:

Takes the root of the binary tree as input.
Initializes an empty list boundary to store the boundary values.
Defines three helper functions:
collect_left_boundary: Recursively traverses the left side of the tree, adding non-leaf nodes to the boundary list.
collect_leaves: Recursively traverses the entire tree to find and add all leaf nodes to the boundary list.
collect_right_boundary: Recursively traverses the right side of the tree, adding non-leaf nodes to the boundary list, ensuring they are added in reverse order by calling the right child before the left.
Starts by adding the root node value to the boundary list, then collects the left boundary, leaves, and right boundary.
Input Handling:

Constructs two example binary trees using the TreeNode class.
Calls boundaryOfBinaryTree with both example trees and prints the results.
Example Output
For the given inputs:

Example 1: The output will be [1, 3, 4, 2]
Example 2: The output will be [1, 2, 4, 7, 8, 9, 10, 6, 3]
This implementation efficiently finds the boundary of the binary tree in an anti-clockwise direction, adhering to the problem's requirements.






