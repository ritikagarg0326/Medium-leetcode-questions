Binary Tree Longest Consecutive Sequence
Given a binary tree, find the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

Example 1:

Input:

   1
    \
     3
    / \
   2   4
        \
         5

Output: 3
Problem Explanation:
You are given a binary tree, and the task is to find the length of the longest consecutive sequence path. A consecutive sequence path in the tree refers to a path from a parent node to its child nodes where each consecutive node has a value greater by 1 than its parent.

For example, in the given tree:

markdown
Copy code
   1
    \
     3
    / \
   2   4
        \
         5
The longest consecutive path is 3 -> 4 -> 5, and the length is 3.

Approach:
Recursive DFS (Depth-First Search):
We will traverse the tree recursively using DFS to explore each node.
At each node, check if the current node continues a consecutive sequence from its parent.
Keep track of the current sequence length and update the maximum length when a longer consecutive sequence is found.
Brute Force Solution:
The brute force solution would involve traversing the tree starting from every node and checking the length of the longest consecutive sequence path for each. However, this approach is inefficient because it involves repeated traversals from every node.

Recursive DFS Approach:
The optimal solution uses a recursive DFS approach that passes down information about the parent node and the current sequence length.

Recursive DFS Optimized Solution:
Steps:
DFS Traversal: Traverse the binary tree using DFS.
Check Consecutive Sequence: For each node, check if it forms a consecutive sequence with its parent.
Update Longest Path: Maintain and update the longest consecutive sequence path found during the traversal.
Code Implementation:
python
Copy code
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

# Function to find the longest consecutive sequence path
def longest_consecutive(root: TreeNode) -> int:
    # Helper function to perform DFS and calculate the longest path
    def dfs(node, parent, length):
        if not node:
            return length
        
        # If the current node is consecutive (parent value + 1)
        if parent is not None and node.val == parent.val + 1:
            length += 1
        else:
            length = 1
        
        # Recur for left and right children
        left_length = dfs(node.left, node, length)
        right_length = dfs(node.right, node, length)
        
        # Return the maximum length from both children
        return max(length, left_length, right_length)
    
    # Edge case: if the tree is empty
    if not root:
        return 0
    
    # Call the DFS helper function starting from the root node
    return dfs(root, None, 0)

# Input handling
def build_tree():
    # Function to build the binary tree for the problem input
    # Example Input: root = TreeNode(1), root.right = TreeNode(3), root.right.left = TreeNode(2), root.right.right = TreeNode(4), root.right.right.right = TreeNode(5)
    root = TreeNode(1)
    root.right = TreeNode(3)
    root.right.left = TreeNode(2)
    root.right.right = TreeNode(4)
    root.right.right.right = TreeNode(5)
    return root

# Build the tree and call the function
root = build_tree()
result = longest_consecutive(root)

# Output result
print("The length of the longest consecutive sequence is:", result)
Explanation of Code:
TreeNode Class: This is a simple class to represent a binary tree node. Each node has a value (val), a left child (left), and a right child (right).
longest_consecutive function: This is the main function to find the longest consecutive sequence in the binary tree.
dfs helper function:
This function recursively explores the tree using DFS.
For each node, it checks if the node value is consecutive with respect to its parent (i.e., the nodeâ€™s value is equal to parent.val + 1).
If the node is consecutive, the length of the sequence is increased; otherwise, it is reset to 1.
It recursively explores both the left and right children of the current node and returns the maximum sequence length found.
build_tree function: This function creates the binary tree for testing. You can modify this function to input different test cases.
Result: The result is the length of the longest consecutive sequence, which is printed after calling the longest_consecutive function.
Time Complexity:
The time complexity is O(n), where n is the number of nodes in the tree. We visit each node exactly once during the DFS traversal.
Space Complexity:
The space complexity is O(h), where h is the height of the tree. This is the space used by the recursion stack in the worst case (when the tree is skewed). In the average case, the space complexity would be O(log n) for a balanced tree.
Example Execution:
For the input tree:

markdown
Copy code
   1
    \
     3
    / \
   2   4
        \
         5
The longest consecutive sequence is 3 -> 4 -> 5, and the length is 3.

Input:
python
Copy code
root = TreeNode(1)
root.right = TreeNode(3)
root.right.left = TreeNode(2)
root.right.right = TreeNode(4)
root.right.right.right = TreeNode(5)
Output:
bash
Copy code
The length of the longest consecutive sequence is: 3
