Best Time to Buy and Sell Stock with Cooldown
Category	Difficulty	Likes	Dislikes
algorithms	Medium (59.19%)	9480	326
Tags
dynamic-programming

Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
The problem is to find the maximum profit you can achieve given a series of stock prices, with the restriction that after selling the stock, you must "cool down" for a day before buying again. This makes it a dynamic programming problem.

Brute Force Solution:
To implement the brute force solution, we try all possible sequences of buy, sell, and cooldown days and calculate the profit. This approach would involve recursively exploring all possible decisions for each day and finding the best outcome.

Steps:
At each day, decide whether to:
Buy (if you don't already own a stock).
Sell (if you own a stock).
Do nothing and move to the next day.
Use recursion to explore all possibilities and keep track of the best profit.
After a sell, enforce a cooldown by skipping the next day.
Time Complexity:
O(2^n): At each day, we have two choices (buy or skip) which leads to exponential time complexity.
Space Complexity:
O(n): Recursive calls can take up to n stack frames.
Brute Force Code:

def maxProfitBruteForce(prices):
    # Recursive helper function to calculate max profit
    def helper(day, holding):
        # Base case: If all days are exhausted
        if day >= len(prices):
            return 0
        
        # Case 1: We have a stock, we can sell or hold
        if holding:
            # Option 1: Sell the stock and cooldown for a day
            sell = prices[day] + helper(day + 2, False)
            # Option 2: Hold and do nothing
            hold = helper(day + 1, True)
            return max(sell, hold)
        
        # Case 2: We don't have a stock, we can buy or do nothing
        else:
            # Option 1: Buy a stock
            buy = -prices[day] + helper(day + 1, True)
            # Option 2: Do nothing
            skip = helper(day + 1, False)
            return max(buy, skip)
    
    # Start from day 0 without holding any stock
    return helper(0, False)

# Example usage
prices = [1, 2, 3, 0, 2]
print(maxProfitBruteForce(prices))  # Output: 3
Optimized Solution using Dynamic Programming:
A better approach is to use dynamic programming (DP) to keep track of the best possible profit at each day while considering the cooldown period. The key idea is to use three states:

buy[i]: The maximum profit on day i if you have bought a stock and are holding it.
sell[i]: The maximum profit on day i if you have sold a stock on that day.
cooldown[i]: The maximum profit on day i if you are in the cooldown phase (i.e., you can't buy a stock because you just sold).
Transitions:
If you bought on day i: The maximum profit will be the maximum of buying on day i or continuing from the previous day. So:

buy[i]=max(buy[i−1],cooldown[i−1]−prices[i])
If you sold on day i: The maximum profit will be the maximum of selling today (i.e., you bought a stock on a previous day) or continuing from the previous day:

sell[i]=buy[i−1]+prices[i]
If you are in cooldown on day i: The maximum profit will be the maximum of being in the cooldown state the previous day or transitioning to cooldown after selling today:

max
⁡

cooldown[i]=max(cooldown[i−1],sell[i−1])
Time Complexity:
O(n): We process each day in constant time.
Space Complexity:
O(1): We only need to store the values of the previous day and the current day.
Optimized Code (Dynamic Programming):

def maxProfit(prices):
    if not prices:
        return 0
    
    n = len(prices)
    
    # Initialize the three states
    buy = -prices[0]  # Max profit if we bought on day 0
    sell = 0          # Max profit if we sold on day 0
    cooldown = 0      # Max profit if we are in cooldown on day 0
    
    for i in range(1, n):
        new_buy = max(buy, cooldown - prices[i])
        new_sell = buy + prices[i]
        new_cooldown = max(cooldown, sell)
        
        # Update the states for the next day
        buy, sell, cooldown = new_buy, new_sell, new_cooldown
    
    # The result is the maximum profit when we're not holding any stock
    return max(sell, cooldown)

# Example usage
prices = [1, 2, 3, 0, 2]
print(maxProfit(prices))  # Output: 3
Explanation:
buy state:

It tracks the maximum profit we can have if we hold a stock on a given day.
new_buy = max(buy, cooldown - prices[i]): We either keep the previously held stock, or we buy a new one if we're in the cooldown period.
sell state:

It tracks the maximum profit if we sell the stock on that day.
new_sell = buy + prices[i]: We can sell only if we bought a stock earlier.
cooldown state:

It tracks the maximum profit we can have if we're in the cooldown period on that day.
new_cooldown = max(cooldown, sell): The cooldown happens after selling, or we remain in cooldown from the previous day.
Final result:

The maximum profit at the end of the period will either be in the sell state (if we sold on the last day) or the cooldown state (if we ended in cooldown).
Comparison of Approaches:
Approach	Time Complexity	Space Complexity	Explanation
Brute Force	O(2^n)	O(n)	Recursively explores all possibilities.
Dynamic Programming	O(n)	O(1)	Uses DP to store and update profits for buy, sell, and cooldown.
The dynamic programming approach is much more efficient and is suitable for larger inputs.
