Super Ugly Number
Category	Difficulty	Likes	Dislikes
algorithms	Medium (45.37%)	2191	394
Tags
math | heap

Companies
A super ugly number is a positive integer whose prime factors are in the array primes.

Given an integer n and an array of integers primes, return the nth super ugly number.

The nth super ugly number is guaranteed to fit in a 32-bit signed integer.

 

Example 1:

Input: n = 12, primes = [2,7,13,19]
Output: 32
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].
Brute Force Solution
In the brute force approach, we can generate super ugly numbers by repeatedly multiplying the previously found ugly numbers by each prime factor. We keep track of the unique numbers generated. This approach will be inefficient for larger values of n because it may generate many unnecessary numbers.

Steps:
Start with an array containing the first super ugly number, which is 1.
For each prime in the list, multiply each super ugly number by the prime and add the result to a set (to maintain uniqueness).
Sort the set of generated numbers.
Continue this until we find the nth super ugly number.
Time Complexity:
O(n * k log k): Each of the n ugly numbers needs to be generated and sorted, where k is the number of primes.
Space Complexity:
O(n): To store the generated super ugly numbers.
Brute Force Code:

def nthSuperUglyNumber(n, primes):
    ugly_numbers = [1]  # Start with the first super ugly number
    ugly_set = set(ugly_numbers)  # To keep track of unique numbers

    while len(ugly_numbers) < n:
        next_ugly = float('inf')
        # Generate next super ugly number from all primes
        for prime in primes:
            next_ugly = min(next_ugly, ugly_numbers[-1] * prime)
        ugly_numbers.append(next_ugly)  # Add the next ugly number
        ugly_set.add(next_ugly)  # Add to the set for uniqueness

    return ugly_numbers[n - 1]  # Return the nth super ugly number

# Example usage
n = 12
primes = [2, 7, 13, 19]
print(nthSuperUglyNumber(n, primes))  # Output: 32
Optimized Solution Using a Min-Heap
To improve the brute force solution, we can use a min-heap (priority queue) to efficiently get the next super ugly number. This approach takes advantage of the fact that we only need to keep track of the next potential candidates for the super ugly numbers.

Steps:
Initialize a min-heap and add the first super ugly number 1 to it.
Use a set to keep track of the numbers we've already added to avoid duplicates.
For each of the next n ugly numbers:
Pop the smallest number from the heap.
For each prime in primes, multiply the smallest number by the prime and push the result back onto the heap if it hasn't been added before.
Continue this until we've extracted n numbers from the heap.
Time Complexity:
O(n log k): Each extraction from the heap takes O(log k), where k is the number of primes.
Space Complexity:
O(n): To store the unique super ugly numbers in the heap and set.
Optimized Code:

import heapq

def nthSuperUglyNumber(n, primes):
    # Min-heap to track the next candidates for super ugly numbers
    min_heap = [1]
    # Set to avoid duplicates
    seen = {1}
    ugly_number = 0
    
    for _ in range(n):
        ugly_number = heapq.heappop(min_heap)  # Get the smallest number
        # Generate new super ugly numbers
        for prime in primes:
            new_ugly = ugly_number * prime
            if new_ugly not in seen:  # If not already seen
                seen.add(new_ugly)
                heapq.heappush(min_heap, new_ugly)  # Push new number to heap

    return ugly_number  # Return the nth super ugly number

# Example usage
n = 12
primes = [2, 7, 13, 19]
print(nthSuperUglyNumber(n, primes))  # Output: 32
Explanation of the Optimized Code:
Heap Initialization:

min_heap is initialized with 1 as the first super ugly number.
seen is a set that keeps track of all the ugly numbers added to avoid duplicates.
Loop to Generate Super Ugly Numbers:

The loop runs n times to get the nth super ugly number.
The smallest number is popped from the heap (this is the next super ugly number).
For each prime, a new super ugly number is generated by multiplying the popped number with the prime.
Avoiding Duplicates:

Before adding a new number to the heap, we check if it's already in seen. This ensures that each number is processed only once, preventing unnecessary duplicates in the heap.
Returning the Result:

After extracting n numbers, the last extracted number is the nth super ugly number.
Summary of Comparison:
Approach	Time Complexity	Space Complexity	Explanation
Brute Force	O(n * k log k)	O(n)	Generates and sorts super ugly numbers.
Optimized (Min-Heap)	O(n log k)	O(n)	Efficiently tracks the next candidates using a min-heap.
The optimized solution is much more efficient, especially for larger values of n, and is the recommended approach.
