Binary Tree Vertical Order Traversal
Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples 1:

Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]
To solve the problem of vertical order traversal of a binary tree, we can follow these steps:

Understanding the Problem:

We need to traverse the tree vertically, meaning that nodes on the same vertical line should be grouped together.
If two nodes are in the same column, we should output them in the order they appear in the tree from top to bottom, and from left to right when they are at the same level.
Data Structure:

A queue can be used for a breadth-first traversal (BFS) of the tree.
A dictionary can be used to store the nodes based on their vertical columns.
Algorithm:

Perform a BFS traversal of the binary tree while keeping track of the vertical column indices.
Use a queue to explore the tree level by level.
For each node, assign a column index (starting from 0 for the root node).
Insert the node values into the corresponding column in the dictionary.
After traversal, extract the columns from the dictionary, sort them, and prepare the output.
Brute Force Solution:
The brute force approach would involve a straightforward implementation of BFS, but we wonâ€™t be optimizing the column indexing or sorting until the end.

Optimized Solution:
The optimized solution will use a more systematic approach with proper tracking of levels and column indices during BFS traversal, reducing the need for multiple passes through the data.

Complexity Analysis:
Time Complexity: The time complexity for both the brute force and optimized solutions is O(n), where n is the number of nodes in the tree. Each node is processed once.
Space Complexity: The space complexity is also O(n), which accounts for storing the output and the queue for BFS.
Implementation
Code Explanation:
TreeNode Class: This represents each node of the binary tree.
vertical_order function: This function performs the vertical order traversal.
BFS Traversal: Using a queue to perform a level-order traversal while maintaining column indices in a dictionary.
Sorting and Output Preparation: After traversing the tree, we sort the columns and prepare the output based on the vertical indices.
Here is the complete code:

python
Copy code
from collections import deque, defaultdict

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def vertical_order(root: TreeNode) -> list:
    if not root:
        return []

    # Dictionary to hold the vertical order
    column_table = defaultdict(list)
    # Queue for BFS (node, column index)
    queue = deque([(root, 0)])  # Start with the root node at column index 0

    while queue:
        node, column = queue.popleft()
        if node is not None:
            # Append the node's value to the list of the corresponding column index
            column_table[column].append(node.val)

            # Add the left child to the queue with column index - 1
            queue.append((node.left, column - 1))
            # Add the right child to the queue with column index + 1
            queue.append((node.right, column + 1))

    # Sort the columns and prepare the output
    sorted_columns = sorted(column_table.keys())
    result = []
    for col in sorted_columns:
        result.append(column_table[col])

    return result

# Function to build the binary tree from a list
def build_tree(values):
    if not values:
        return None

    root = TreeNode(values[0])
    queue = deque([root])
    index = 1

    while index < len(values):
        node = queue.popleft()
        if values[index] is not None:
            node.left = TreeNode(values[index])
            queue.append(node.left)
        index += 1
        
        if index < len(values) and values[index] is not None:
            node.right = TreeNode(values[index])
            queue.append(node.right)
        index += 1

    return root

# Input handling
input_values = [3, 9, 20, None, None, 15, 7]
root = build_tree(input_values)

# Get the vertical order traversal
result = vertical_order(root)

# Output result
print("Vertical order traversal is:", result)
Code Explanation:
TreeNode Class: Defines a binary tree node with a value, left child, and right child.
vertical_order Function:
Initializes a default dictionary to hold the vertical order of node values.
Uses a queue for BFS to keep track of nodes and their corresponding vertical column indices.
Processes each node by adding its value to the correct column and enqueues its children with updated column indices.
After processing all nodes, it sorts the column indices and prepares the output list based on these sorted indices.
build_tree Function: Builds the binary tree from a list of values (where None represents a missing node).
Input Handling: Constructs the binary tree using the provided list and calls the vertical_order function.
Output: Finally, it prints the vertical order traversal of the tree.
Example Execution:
For the input binary tree represented by the list [3, 9, 20, None, None, 15, 7], the output will be:

bash
Copy code
Vertical order traversal is: [[9], [3, 15], [20], [7]]
This shows the nodes grouped by their vertical levels from left to right.
