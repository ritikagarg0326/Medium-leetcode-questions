3Sum Smaller
Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]

Problem Explanation:
Given an array of integers nums and a target value, we need to find the number of unique triplets (i, j, k) such that:

0
≤
𝑖
<
𝑗
<
𝑘
<
𝑛
0≤i<j<k<n
nums[i]
+
nums[j]
+
nums[k]
<
target
nums[i]+nums[j]+nums[k]<target
Approach 1: Brute Force Solution
Explanation:
A brute force approach would involve checking all possible triplets and counting those whose sum is less than the target.
The naive way is to use three nested loops and iterate over every possible combination of triplets in the array.
Time Complexity:
The brute force approach takes 
𝑂
(
𝑛
3
)
O(n 
3
 ) time, where 
𝑛
n is the length of the input array, since we are considering all combinations of three numbers.
Space Complexity:
The space complexity of this solution is 
𝑂
(
1
)
O(1) because no additional space is required apart from a few variables to store the results.
Approach 2: Optimized Solution Using Two Pointers
Explanation:
The optimized approach leverages sorting and the two-pointer technique to reduce the time complexity to 
𝑂
(
𝑛
2
)
O(n 
2
 ).
Steps:
Sort the array.
For each element, treat it as the first element of the triplet.
Use two pointers (left and right) to find pairs of elements whose sum, when added to the current element, is less than the target.
Time Complexity:
Sorting the array takes 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn), and the two-pointer approach within a loop takes 
𝑂
(
𝑛
2
)
O(n 
2
 ), leading to an overall time complexity of 
𝑂
(
𝑛
2
)
O(n 
2
 ).
Space Complexity:
The space complexity is 
𝑂
(
1
)
O(1) as no extra space is required beyond a few pointers and counters.
Code Implementation:
Optimized Solution (with Two Pointers):
python
Copy code
def three_sum_smaller(nums, target):
    """
    This function returns the count of unique triplets whose sum is less than the target.
    
    :param nums: List[int], list of integers.
    :param target: int, the target sum.
    :return: int, the count of valid triplets.
    """
    # Sort the array
    nums.sort()
    
    count = 0
    n = len(nums)
    
    # Iterate through the array, selecting one element and using two pointers for the other two
    for i in range(n - 2):
        left = i + 1
        right = n - 1
        
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            
            # If the sum is less than the target, all triplets from left to right are valid
            if current_sum < target:
                count += (right - left)  # All combinations of (i, left, left+1...right) are valid
                left += 1
            else:
                right -= 1
    
    return count

# Input handling and driver code
def main():
    # Example input
    nums = [-2, 0, 1, 3]
    target = 2
    
    # Calculate and print the result
    result = three_sum_smaller(nums, target)
    print("Number of triplets with sum less than target:", result)

if __name__ == "__main__":
    main()
Explanation of the Optimized Code:
Sorting the Array:

The first step is to sort the input array. This allows us to efficiently use the two-pointer technique to find pairs that satisfy the condition.
Main Loop:

We iterate over each element nums[i], treating it as the first element of the triplet. For each i, we initialize two pointers: left (immediately to the right of i) and right (at the end of the array).
Two-Pointer Search:

For each pair of elements nums[left] and nums[right], we check if the sum of nums[i] + nums[left] + nums[right] is less than the target.
If it is, then all combinations of (i, left, left+1, ..., right) are valid, because the array is sorted, and any element between left and right will give a smaller sum.
We increment left to check the next possible pair.
Moving Pointers:

If the current sum is less than the target, increment the left pointer.
If the current sum is greater than or equal to the target, decrement the right pointer.
Return Result:

At the end, we return the total count of valid triplets.
Brute Force Code Implementation:
python
Copy code
def brute_force_three_sum_smaller(nums, target):
    """
    Brute force approach to count the number of triplets whose sum is less than the target.
    
    :param nums: List[int], list of integers.
    :param target: int, the target sum.
    :return: int, the count of valid triplets.
    """
    count = 0
    n = len(nums)
    
    # Iterate over all triplets
    for i in range(n - 2):
        for j in range(i + 1, n - 1):
            for k in range(j + 1, n):
                if nums[i] + nums[j] + nums[k] < target:
                    count += 1
    
    return count

# Input handling and driver code for brute force solution
def main_brute_force():
    # Example input
    nums = [-2, 0, 1, 3]
    target = 2
    
    # Calculate and print the result
    result = brute_force_three_sum_smaller(nums, target)
    print("Brute force - Number of triplets with sum less than target:", result)

if __name__ == "__main__":
    main_brute_force()
Brute Force Explanation:
Three Nested Loops:
The brute force method uses three nested loops to iterate over all possible triplets (i, j, k) and check if their sum is less than the target.
For each triplet, we directly compute the sum and compare it with the target. If it is less, we increase the count.
Time and Space Complexity:
Brute Force Approach:

Time Complexity: 
𝑂
(
𝑛
3
)
O(n 
3
 ) because we are using three nested loops to explore every triplet.
Space Complexity: 
𝑂
(
1
)
O(1) since we are using only a few variables for counting.
Optimized Approach:

Time Complexity: 
𝑂
(
𝑛
2
)
O(n 
2
 ) due to sorting and using the two-pointer technique for each element.
Space Complexity: 
𝑂
(
1
)
O(1), as we only use a few extra pointers and variables.
Example Execution:
bash
Copy code
Number of triplets with sum less than target: 2
Brute force - Number of triplets with sum less than target: 2
Conclusion:
The brute force solution is straightforward but inefficient with 
𝑂
(
𝑛
3
)
O(n 
3
 ) complexity. It iterates over all possible triplets.
The optimized solution using the two-pointer technique significantly reduces the time complexity to 
𝑂
(
𝑛
2
)
O(n 
2
 ), making it more practical for larger inputs.
