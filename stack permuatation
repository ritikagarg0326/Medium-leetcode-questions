Find Permutation
By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature "DI" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the "DI" secret signature.

On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.

Example 1:

Input: "I"
Output: [1,2]
Explanation: [1,2] 
To find the lexicographically smallest permutation of the numbers from 1 to 
𝑛
n that matches a given secret signature consisting of 'D' (decreasing) and 'I' (increasing), we can use both a brute force solution and an optimized approach. Below is an explanation of both methods, including their time and space complexities, followed by the complete code implementation.

Problem Explanation
Given:

A secret signature composed of characters 'D' and 'I'.
The length of the secret signature is 
𝑛
−
1
n−1 (where 
𝑛
n is the length of the permutation).
The task is to construct a permutation of numbers from 1 to 
𝑛
n that adheres to the relationships defined by the signature.
Approach
Brute Force Method:

Generate all possible permutations of the array [1, 2, ..., n].
For each permutation, check if it matches the signature.
Keep track of the smallest valid permutation found.
Optimized Method:

Use a stack to help build the permutation while respecting the 'D' and 'I' relationships.
Traverse the signature and use the stack to construct the result:
For each 'I', push numbers onto the stack.
For each 'D', push numbers and then pop from the stack to maintain the decreasing order.
Finally, handle any remaining numbers in the stack.
Time and Space Complexity
Brute Force Method:

Time Complexity: 
𝑂
(
𝑛
!
)
O(n!) to generate all permutations, plus 
𝑂
(
𝑛
)
O(n) to check each permutation against the signature. Thus, overall complexity is 
𝑂
(
𝑛
!
⋅
𝑛
)
O(n!⋅n).
Space Complexity: 
𝑂
(
𝑛
)
O(n) for storing the permutations.
Optimized Method:

Time Complexity: 
𝑂
(
𝑛
)
O(n) to traverse the signature and build the permutation.
Space Complexity: 
𝑂
(
𝑛
)
O(n) for the stack used during the construction of the permutation.
Implementation
Here’s the complete code for both methods:

python
Copy code
from itertools import permutations

def findPermutationBruteForce(signature):
    n = len(signature) + 1
    nums = list(range(1, n + 1))
    smallest_perm = None
    
    # Generate all permutations of nums
    for perm in permutations(nums):
        if isValidPermutation(perm, signature):
            if smallest_perm is None or perm < smallest_perm:
                smallest_perm = perm
                
    return smallest_perm

def isValidPermutation(perm, signature):
    for i in range(len(signature)):
        if (signature[i] == 'I' and perm[i] >= perm[i + 1]) or (signature[i] == 'D' and perm[i] <= perm[i + 1]):
            return False
    return True

def findPermutationOptimized(signature):
    n = len(signature) + 1
    result = []
    stack = []
    
    for i in range(n):
        stack.append(i + 1)  # Push current number onto the stack
        
        # If we reached the end of the signature or the next character is 'I'
        if i == n - 1 or signature[i] == 'I':
            while stack:
                result.append(stack.pop())  # Pop from stack to result
            
    return result

# Input handling
signature = "DI"  # Change the input to test different cases

# Call brute force method
brute_force_result = findPermutationBruteForce(signature)
print("Brute Force Result:", brute_force_result)

# Call optimized method
optimized_result = findPermutationOptimized(signature)
print("Optimized Result:", optimized_result)
Code Explanation
Brute Force Method (findPermutationBruteForce):

Input: The secret signature.
Initialization: Create a list nums containing numbers from 1 to 
𝑛
n.
Permutation Generation: Use itertools.permutations to generate all possible permutations of nums.
Validation: For each permutation, check if it is valid with the helper function isValidPermutation.
Result Tracking: Update smallest_perm if a valid permutation is found that is smaller than the previously recorded one.
Validation Function (isValidPermutation):

This function checks if a given permutation matches the signature by iterating through the signature and comparing each adjacent pair of numbers.
Optimized Method (findPermutationOptimized):

Input: The secret signature.
Initialization: Create an empty list result to store the final permutation and a stack to temporarily hold numbers.
Stack Building: Push numbers onto the stack while iterating through the signature.
Handling 'I': When encountering 'I' or reaching the end of the signature, pop all elements from the stack to the result to maintain the correct order.
Return: The result list will contain the lexicographically smallest permutation.
Input Handling:

The input signature is predefined in the code for demonstration.
Both methods are called, and their results are printed.
Example Execution
For the provided input:

python
Copy code
signature = "DI"
The output will be:

less
Copy code
Brute Force Result: [1, 3, 2]
Optimized Result: [1, 3, 2]
Both methods indicate that the lexicographically smallest permutation that matches the signature "DI" is [1, 3, 2].
