Capacity To Ship Packages Within D Days

A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Problem Explanation:
You are given a list of weights representing the weight of packages on a conveyor belt. You need to ship these packages within days days. Each day, you must load the ship with packages in the order they appear in the list, and you cannot load more weight than the maximum capacity of the ship on any given day. The task is to find the minimum ship capacity such that all the packages are shipped within days.

Brute Force Solution:
In the brute force approach, we can try all possible capacities from the maximum weight of a package to the sum of all weights (since any valid ship capacity must be at least as large as the heaviest package). For each capacity, we can simulate loading packages onto the ship and check whether we can finish shipping within the given number of days.

Time Complexity:
Time: 
𝑂
(
(
𝑊
−
𝑚
𝑎
𝑥
(
𝑤
𝑒
𝑖
𝑔
ℎ
𝑡
𝑠
)
)
×
𝑛
)
O((W−max(weights))×n), where W is the sum of all package weights, and n is the length of the weights array.
Space: 
𝑂
(
1
)
O(1), since we are only using constant extra space.
Brute Force Code:
python
Copy code
def canShip(weights, capacity, days):
    current_weight = 0
    required_days = 1
    
    for weight in weights:
        if current_weight + weight > capacity:
            required_days += 1
            current_weight = 0
        current_weight += weight
    
    return required_days <= days

def shipWithinDaysBruteForce(weights, days):
    max_weight = max(weights)
    total_weight = sum(weights)
    
    # Try all capacities from max_weight to total_weight
    for capacity in range(max_weight, total_weight + 1):
        if canShip(weights, capacity, days):
            return capacity
    
    return total_weight

# Example Input
weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
days = 5

print(shipWithinDaysBruteForce(weights, days))  # Output: 15
Optimized Solution (Binary Search):
Since the brute force approach tries all capacities, we can optimize this by using binary search. The key observation is that as the capacity increases, the number of days required to ship the packages decreases. This means the problem exhibits a monotonic behavior, and binary search is well-suited for such problems.

Steps:
The minimum possible capacity of the ship is max(weights), as the ship must be able to carry the heaviest package.
The maximum possible capacity is sum(weights), as we could theoretically ship all packages in one day.
Use binary search to find the smallest capacity that allows us to ship all packages within the given number of days.
Time Complexity:
Time: 
𝑂
(
𝑛
log
⁡
𝑊
)
O(nlogW), where n is the number of packages, and W is the difference between the total weight and the maximum weight (i.e., W = sum(weights) - max(weights)).
Space: 
𝑂
(
1
)
O(1), since we are using constant extra space.
Optimized Code (Binary Search):
python
Copy code
def canShip(weights, capacity, days):
    current_weight = 0
    required_days = 1
    
    for weight in weights:
        if current_weight + weight > capacity:
            required_days += 1
            current_weight = 0
        current_weight += weight
    
    return required_days <= days

def shipWithinDaysBinarySearch(weights, days):
    max_weight = max(weights)
    total_weight = sum(weights)
    
    left, right = max_weight, total_weight
    
    while left < right:
        mid = (left + right) // 2
        if canShip(weights, mid, days):
            right = mid
        else:
            left = mid + 1
    
    return left

# Example Input
weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
days = 5

print(shipWithinDaysBinarySearch(weights, days))  # Output: 15
Explanation of the Optimized Solution:
Binary Search on Capacity:

We use binary search to narrow down the possible ship capacities. The range of possible capacities is between the maximum weight (max(weights)) and the total weight (sum(weights)).
Helper Function canShip:

This function checks whether we can ship all the packages within the given number of days for a specific ship capacity.
It works by trying to fit as many packages as possible within the capacity of the ship. If the total weight for a day exceeds the capacity, we move to the next day.
Binary Search Logic:

We check the mid-point of the current capacity range. If it's possible to ship all packages with the mid-point capacity within the allowed days, we search the lower half (i.e., we try a smaller capacity).
Otherwise, we search the upper half, meaning we need a larger capacity to ship the packages within the required days.
Final Result:

The left pointer in the binary search will eventually converge to the smallest capacity that allows us to ship all the packages in the given number of days.
Full Code with Input and Output:
python
Copy code
def canShip(weights, capacity, days):
    current_weight = 0
    required_days = 1
    
    for weight in weights:
        if current_weight + weight > capacity:
            required_days += 1
            current_weight = 0
        current_weight += weight
    
    return required_days <= days

def shipWithinDaysBinarySearch(weights, days):
    max_weight = max(weights)
    total_weight = sum(weights)
    
    left, right = max_weight, total_weight
    
    while left < right:
        mid = (left + right) // 2
        if canShip(weights, mid, days):
            right = mid
        else:
            left = mid + 1
    
    return left

# Example Input
weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
days = 5

# Brute Force
print("Brute Force Result:", shipWithinDaysBruteForce(weights, days))  # Output: 15

# Binary Search (Optimized)
print("Binary Search Result:", shipWithinDaysBinarySearch(weights, days))  # Output: 15
Final Thoughts:
The brute force solution works for small inputs but becomes inefficient as the number of packages increases.
The binary search approach efficiently narrows down the capacity in 
𝑂
(
𝑛
log
⁡
𝑊
)
O(nlogW) time, where n is the number of packages and W is the difference between the total and maximum weights. It is the optimal solution for this problem.
