Delete Operation for Two Strings
Category	Difficulty	Likes	Dislikes
algorithms	Medium (62.71%)	5828	87
Tags
string

Companies
Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
To solve the problem of determining the minimum number of steps required to make two strings equal by deleting characters, we can use both brute force and optimized dynamic programming approaches. Below, I will provide detailed explanations of both methods, including their time and space complexities, followed by a complete Python implementation.

Problem Overview
Given two strings word1 and word2, the goal is to calculate the minimum number of deletions required to make them identical.

Brute Force Solution
Understanding the Brute Force Approach:

We can explore all possible subsequences of both strings.
We will generate all possible combinations of deletions for both strings and check how many characters need to be deleted to make them equal.
Since this approach involves generating subsequences, it can become computationally expensive.
Time Complexity:

𝑂
(
2
𝑚
+
𝑛
)
O(2 
m+n
 ): where 
𝑚
m and 
𝑛
n are the lengths of word1 and word2, respectively. This is because for each character in both strings, we have two choices (keep or delete).
Space Complexity:

𝑂
(
1
)
O(1): No additional space is needed for data structures, although storing subsequences may take extra space.
Optimized Solution
Understanding the Optimized Approach:

We can use dynamic programming to find the longest common subsequence (LCS) of the two strings.
Once we find the length of the LCS, we can compute the minimum number of deletions needed as follows:
deletions
=
(
len(word1)
−
LCS
)
+
(
len(word2)
−
LCS
)
deletions=(len(word1)−LCS)+(len(word2)−LCS)
The reason is that we only need to keep the LCS characters and remove the rest from both strings.
Time Complexity:

𝑂
(
𝑚
×
𝑛
)
O(m×n): We create a 2D DP table where 
𝑚
m and 
𝑛
n are the lengths of the two strings.
Space Complexity:

𝑂
(
𝑚
×
𝑛
)
O(m×n): The space used for the DP table.
Full Code Implementation
Here’s the complete Python implementation for both brute force and optimized approaches:

python
Copy code
def minDistance_brute_force(word1, word2):
    """Brute force solution to find the minimum number of deletions to make two strings equal."""
    def count_deletions(i, j):
        if i == len(word1) and j == len(word2):
            return 0
        if i == len(word1):
            return len(word2) - j  # Remaining characters in word2
        if j == len(word2):
            return len(word1) - i  # Remaining characters in word1
        
        if word1[i] == word2[j]:
            return count_deletions(i + 1, j + 1)
        else:
            # Try deleting from either string
            return min(
                1 + count_deletions(i + 1, j),  # Delete from word1
                1 + count_deletions(i, j + 1)   # Delete from word2
            )

    return count_deletions(0, 0)

def minDistance_optimized(word1, word2):
    """Optimized solution using dynamic programming to find the minimum number of deletions."""
    m, n = len(word1), len(word2)
    # Create a DP table
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Fill the DP table for LCS
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    # LCS length
    lcs_length = dp[m][n]
    # Calculate deletions
    return (m - lcs_length) + (n - lcs_length)

# Input handling
def main():
    word1 = "sea"  # Example input
    word2 = "eat"  # Example input
    print("Input Word1:", word1)
    print("Input Word2:", word2)

    # Brute Force Result
    brute_force_result = minDistance_brute_force(word1, word2)
    print("Minimum deletions (Brute Force):", brute_force_result)

    # Optimized Result
    optimized_result = minDistance_optimized(word1, word2)
    print("Minimum deletions (Optimized):", optimized_result)

if __name__ == "__main__":
    main()
Explanation of the Code
minDistance_brute_force(word1, word2):

Defines a recursive function count_deletions that checks each character in both strings.
If the characters match, it moves to the next character in both strings.
If they don’t match, it considers the two options (deleting from either string) and adds 1 to the count of deletions.
minDistance_optimized(word1, word2):

Initializes the dimensions of the DP table based on the lengths of the input strings.
Fills the DP table according to the rules of finding the longest common subsequence.
Computes the minimum deletions based on the LCS length.
main():

Handles input and prints the results from both approaches.
This implementation provides both a brute force and an optimized solution to the problem, demonstrating the differences in efficiency and complexity.






